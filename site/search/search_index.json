{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#404skill-projects","title":"404Skill Projects","text":""},{"location":"projects/overview/","title":"Overview","text":"<p>Welcome to Skill404\u2014a learning platform where you\u2019ll build multiple backend projects to strengthen your skills. While each project has different business requirements, they all share a few technical requirements:</p> <ol> <li> <p>Language Flexibility: You\u2019re free to pick any programming language (Node.js, Python, Java, Go, etc.).</p> </li> <li> <p>Database Usage: You must use some database to store data (SQLite, Postgres, MySQL, MongoDB, etc.).</p> </li> <li> <p>Containerization: Your application must run in a Docker container.</p> </li> <li> <p>Single Command Spin-Up: We want to be able to launch your entire solution\u2014API + database\u2014with one command (e.g., docker-compose up --build).</p> </li> </ol> <p>Below you\u2019ll find details on each of these points, along with references and tips for junior-to-mid-level engineers who might be newer to Docker, databases, or general dev-ops practices.</p>"},{"location":"projects/overview/#choosing-your-technology-stack","title":"Choosing Your Technology Stack","text":"<p>We believe in letting you pick the technology you\u2019re most comfortable with or want to learn. However, you must ensure the following:</p> <ul> <li>Your chosen language can be packaged in Docker (practically every major language can). You can connect to some database. If you\u2019re using SQLite, your application can read the .db file within the same container. If you\u2019re using a remote DB (Postgres, MySQL, MongoDB, etc.), you\u2019ll define the service in <code>docker-compose.yml</code>.</li> </ul>"},{"location":"projects/overview/#containerization-with-docker","title":"Containerization with Docker","text":"<p>Docker allows you to package your application and its dependencies into a single \u201cimage,\u201d which can then be run as a \u201ccontainer\u201d in any environment that has Docker installed. This ensures consistency: if it runs on your machine, it\u2019ll run on someone else\u2019s, too.</p>"},{"location":"projects/overview/#dockerfile","title":"Dockerfile","text":"<p>A Dockerfile is a list of instructions to build your image. For example, a Node.js project might have:</p> <pre><code>FROM node:18-alpine\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n</code></pre> <ul> <li><code>FROM node:18-alpine</code> uses a lightweight Node.js image.</li> <li><code>WORKDIR /usr/src/app</code> sets the working directory inside the container.</li> <li><code>COPY package*.json ./</code> then <code>RUN npm install</code> installs dependencies.</li> <li><code>COPY . .</code> copies source code.</li> <li><code>EXPOSE 3000</code> makes port 3000 available.</li> <li><code>CMD [\"npm\", \"start\"]</code> runs your app.</li> </ul> <p>Remember: If you use Python or Java, your Dockerfile instructions will differ (install Python or Java, copy your code, run pip install or Gradle/Maven, etc.).</p>"},{"location":"projects/overview/#docker-compose-for-multi-service-apps","title":"Docker Compose for Multi-Service Apps","text":""},{"location":"projects/overview/#why-docker-compose","title":"Why Docker Compose?","text":"<p>If your app only needs a single container (e.g., Python + SQLite in one image), you can run it with plain Docker. But if you want, say, Node.js + Postgres, you have two containers that must run together. Docker Compose simplifies this:</p> <ul> <li>You define a docker-compose.yml file with services for your app and any related containers (database, cache, etc.).</li> <li>One command (docker-compose up --build) spins up everything you need.</li> </ul>"},{"location":"projects/overview/#example-docker-composeyml","title":"Example docker-compose.yml","text":"<p>Below is an example for a Node.js + Postgres setup:</p> <pre><code>version: '3.8'\nservices:\n  app:\n    build: .\n    container_name: library_app\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n    environment:\n      - DB_HOST=db\n      - DB_PORT=5432\n      - DB_NAME=library_db\n      - DB_USER=postgres\n      - DB_PASSWORD=postgres\n  db:\n    image: postgres:14\n    container_name: library_db\n    environment:\n      - POSTGRES_DB=library_db\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - db-data:/var/lib/postgresql/data\n\nvolumes:\n  db-data:\n</code></pre> <p>This file declares two services:</p> <ul> <li><code>app</code>: Built from the Dockerfile in the current directory (build: .), exposing port 3000, with environment variables that let your app connect to the db.</li> <li><code>db</code>: A Postgres container with environment variables to set up the database name and user.</li> </ul> <p>When you run docker-compose up --build, both containers start, and your app knows where to find the DB via environment variables.</p> <p>We recommend setting up a simple \"hello world\" api containerized with the tech stack you chose, and then move on to the functional requirements of a project.</p> <p>If you are having any difficulties setting up, please open an issue on our github repo and we'll try to help :)</p>"},{"location":"projects/library_management/add_new_item_cds/","title":"Adding Music CDs","text":""},{"location":"projects/library_management/add_new_item_cds/#overview","title":"Overview","text":"<p>By now, your system can handle books, magazines, and DVDs. In this section, you\u2019ll extend your library catalog by introducing music CDs as a new item type. You\u2019ll also update membership rules so that each user type can borrow a certain number of CDs.</p>"},{"location":"projects/library_management/add_new_item_cds/#new-item-type-cd","title":"New Item Type: \u201cCD\u201d","text":"<ul> <li>Borrow Duration (if you\u2019re tracking): Up to 2 months.  </li> <li>Item Model: Same structure as your existing items (<code>item_id</code>, <code>name</code>, <code>type</code>, <code>status</code>). You simply add <code>\"cd\"</code> as an allowed type.</li> </ul>"},{"location":"projects/library_management/add_new_item_cds/#membership-limits-for-cds","title":"Membership Limits for CDs","text":"<ul> <li>Student: Up to 2 CDs  </li> <li>Basic: Up to 2 CDs  </li> <li>Premium: Up to 4 CDs    Make sure you enforce these limits the same way you do for books, magazines, and DVDs.</li> </ul>"},{"location":"projects/library_management/add_new_item_cds/#api-changes","title":"API Changes","text":"<ul> <li> <p>POST /items </p> <ul> <li>Accept <code>\"cd\"</code> in the <code>type</code> field.  </li> <li>Example:    <pre><code>{\n  \"name\": \"Greatest Hits by Queen\",\n  \"type\": \"cd\"\n}\n</code></pre></li> <li>Store and return the item with <code>status = \"available\"</code> by default.</li> </ul> </li> <li> <p>Borrowing and Returning </p> <ul> <li>Update any logic that checks membership limits so it includes CDs.  </li> <li>Example: A Student can now hold 2 CDs at a time. If they already have 2 CDs borrowed, borrowing another CD should return a 400 Bad Request.</li> </ul> </li> <li> <p>Borrow Duration (Optional)</p> <ul> <li>If you\u2019re tracking durations, store a <code>due_date</code> for CDs that\u2019s 2 months from the borrowing date.</li> </ul> </li> </ul>"},{"location":"projects/library_management/add_new_item_cds/#implementation-tips","title":"Implementation Tips","text":"<ul> <li>In your borrow logic, when a user requests a <code>\"cd\"</code>, your code should:<ol> <li>Confirm user hasn\u2019t hit the CD borrowing limit.  </li> <li>Verify the item is actually <code>\"cd\"</code> and is <code>\"available\"</code>.  </li> <li>Mark it as <code>\"borrowed\"</code>, update user\u2019s borrowed count or borrowing record.  </li> </ol> </li> <li>In your return logic, ensure the item type <code>\"cd\"</code> is handled exactly like the others\u2014just update the item\u2019s status to <code>\"available\"</code> and record a return date if you\u2019re tracking it.</li> </ul>"},{"location":"projects/library_management/add_new_item_cds/#testing-with-cds","title":"Testing with CDs","text":"<ul> <li>Create multiple CD items via <code>POST /items</code> with <code>\"type\": \"cd\"</code>.  </li> <li>Borrow them from different users (Student, Basic, Premium) to confirm each membership type\u2019s new limit is enforced.  </li> <li>Try exceeding the CD limit to ensure your system returns an appropriate error.  </li> <li>Return CDs to verify items become available again.</li> </ul>"},{"location":"projects/library_management/add_new_item_cds/#optional-additional-features","title":"Optional Additional Features","text":"<ul> <li>Genre or Artist Field: Add fields like <code>artist</code> or <code>genre</code> if you want to practice more complex item attributes.  </li> <li>Extended Validation: Maybe disallow empty <code>name</code> or enforce a pattern for <code>artist</code>.</li> </ul>"},{"location":"projects/library_management/add_new_item_cds/#next-steps","title":"Next Steps","text":"<p>With CDs integrated, your Library Management System now supports:    - Multiple item types (books, magazines, DVDs, CDs).    - Different membership limits for each type.    - Borrowing and returning logic for all items.  </p> <p>The final major feature (in the core specification) is the Promotion System\u2014which allows users who have borrowed 15+ books in the last year to double their book limit. Move on to the next section to implement promotions and see how it integrates with your existing borrowing logic.</p>"},{"location":"projects/library_management/borrowing_and_returning/","title":"Borrowing &amp; Returning Items","text":""},{"location":"projects/library_management/borrowing_and_returning/#overview","title":"Overview","text":"<p>Now that you can create and store both users and items, the next step is to implement the core library functionality: borrowing and returning. This is where you enforce membership limits, track which items are on loan, and manage due dates or borrowing durations (if your design includes them).  </p>"},{"location":"projects/library_management/borrowing_and_returning/#membership-limits","title":"Membership Limits","text":"<p>Recall that each membership type has different borrowing limits for books, magazines, DVDs, and (later) CDs. For example:    - Student: Up to 5 books, 5 magazines, 2 DVDs    - Basic: Up to 3 books, 3 magazines, 2 DVDs    - Premium: Up to 10 books, 5 magazines, 5 DVDs  </p> <p>In subsequent steps, you\u2019ll add CDs with their own limits.  </p>"},{"location":"projects/library_management/borrowing_and_returning/#data-model-considerations","title":"Data Model Considerations","text":"<ul> <li>User:  <ul> <li>Already has <code>membership_type</code>.  </li> <li>You may want a convenient way to check how many items of each type the user currently holds.  </li> </ul> </li> <li>Item:  <ul> <li>Has <code>status</code>, which can be <code>\"available\"</code> or <code>\"borrowed\"</code>.  </li> </ul> </li> <li>Borrowing Records (optional):  <ul> <li>To track the date/time of borrowing, due dates, or return dates.  </li> <li>This can be a dedicated SQL table (e.g., <code>borrowings</code>) or a sub-array of \u201chistory\u201d within the user record, or both\u2014depending on your design.</li> </ul> </li> </ul>"},{"location":"projects/library_management/borrowing_and_returning/#borrowing-an-item","title":"Borrowing an Item","text":"<p>Endpoint: <code>POST /items/:id/borrow</code> </p> <p>Request Body (example):    <pre><code>{\n  \"user_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"item_type\": \"book\"\n}\n</code></pre> Implementation Steps:    1. Validate the user: Confirm the <code>user_id</code> exists.    2. Check membership limits: How many items of this type does the user currently hold? Compare to allowed limit.    3. Check the item: Verify that the item with <code>:id</code> is found, and that <code>type</code> matches <code>\"book\"</code> (or user\u2019s requested item type).    4. Check item availability: Is <code>status</code> <code>\"available\"</code>? If not, return an error (e.g., 400 or 409).    5. Borrow:       - Update the item\u2019s <code>status</code> to <code>\"borrowed\"</code>.       - Optionally store a \u201cborrowed_date\u201d somewhere (item record or a separate \u201cborrowing history\u201d table/array).    6. Respond with 200 or 201 status code and a message indicating success (and possibly the new due date or borrowed date).</p> <p>Error Handling Examples:    - 400 Bad Request if membership limit reached or item is already borrowed.    - 404 Not Found if user or item doesn\u2019t exist.</p>"},{"location":"projects/library_management/borrowing_and_returning/#returning-an-item","title":"Returning an Item","text":"<p>Endpoint: <code>POST /items/:id/return</code> </p> <p>Request Body (example):    <pre><code>{\n  \"user_id\": \"123e4567-e89b-12d3-a456-426614174000\"\n}\n</code></pre> Implementation Steps:    1. Validate the user: Confirm the <code>user_id</code> exists.    2. Check the item: Ensure the item with <code>:id</code> is found and is actually <code>borrowed</code>.    3. Confirm who borrowed it: Optionally verify that the item is borrowed by this specific user (if you\u2019re tracking that detail).    4. Return:       - Update <code>status</code> to <code>\"available\"</code>.       - Store a \u201creturned_date\u201d in the borrowing record or history.    5. Respond with a success code (200 OK).</p> <p>Error Handling Examples:    - 400 Bad Request or 409 if item is not currently borrowed.    - 404 Not Found if user or item doesn\u2019t exist.</p>"},{"location":"projects/library_management/borrowing_and_returning/#tracking-borrowing-history","title":"Tracking Borrowing History","text":"<ul> <li>Goal: Keep a record of all items a user has borrowed, including borrowed date and return date.  </li> <li>Possible Approaches:  <ol> <li>Dedicated \u201cHistory\u201d Table: Each row represents one borrow-return cycle (with <code>borrowed_date</code> and <code>returned_date</code>).  </li> <li>Embedded Array in User: For each borrow event, push an object into the user\u2019s <code>history</code>. Upon return, update that object\u2019s <code>returned_date</code>.  </li> </ol> </li> <li>GET /users/:id/history Example Response:      <pre><code>[\n  {\n    \"item_id\": \"abc123\",\n    \"item_type\": \"book\",\n    \"borrowed_date\": \"2023-01-01\",\n    \"returned_date\": \"2023-02-01\"\n  },\n  {\n    \"item_id\": \"xyz789\",\n    \"item_type\": \"dvd\",\n    \"borrowed_date\": \"2023-03-10\",\n    \"returned_date\": null\n  }\n]\n</code></pre></li> </ul>"},{"location":"projects/library_management/borrowing_and_returning/#due-dates-borrow-durations-optional","title":"Due Dates &amp; Borrow Durations (Optional)","text":"<ul> <li>Books: up to 3 months  </li> <li>Magazines: 1 month  </li> <li>DVDs: 1 month  </li> <li>This is optional if you just want to track availability. But if you do, you might store a <code>due_date</code> during the borrow step and check if it\u2019s overdue on return.  </li> </ul>"},{"location":"projects/library_management/borrowing_and_returning/#practical-tips","title":"Practical Tips","text":"<ul> <li>Updating Limits: You might keep a count of how many items each user currently has borrowed per item type. This can be calculated in real-time from a \u201cborrowings\u201d table or stored as fields in the user record and updated each time something is borrowed or returned.  </li> <li>Conflicts: If multiple users try to borrow the same item at once, ensure your code handles concurrency gracefully (if your project context requires it).  </li> </ul>"},{"location":"projects/library_management/borrowing_and_returning/#testing-your-borrowreturn-logic","title":"Testing Your Borrow/Return Logic","text":"<ul> <li>Create a few users with different membership types.  </li> <li>Create multiple items (books, magazines, DVDs).  </li> <li>Attempt to borrow items until you hit the membership limit\u2014ensure your API returns an error.  </li> <li>Return items and verify they become available again.  </li> <li>(Optional) Log or display due dates if you\u2019re implementing them.  </li> </ul>"},{"location":"projects/library_management/borrowing_and_returning/#next-steps","title":"Next Steps","text":"<p>With borrowing and returning logic in place, you have the foundation for a functioning library system. The next pages will cover:    - Adding a new item type (CDs).    - Promotion System that doubles book limits for power users (who borrow 15+ books).    - Fines, Overdue Handling, or other advanced features (optional).  </p> <p>By the end of this section, your library should be able to handle the core workflow of checking out and returning library materials, respecting membership limits and item availability.  </p>"},{"location":"projects/library_management/creating_items/","title":"Creating Items","text":""},{"location":"projects/library_management/creating_items/#overview","title":"Overview","text":"<p>In this second section of the Library Management System, you\u2019ll focus on defining and managing items that the library offers for borrowing. At this stage, the core item types are:    - Books    - Magazines    - DVDs  </p> <p>Later, you\u2019ll add CDs (and potentially more) to the system. For now, make sure you can create, store, and retrieve these items in your chosen database or data structure.</p>"},{"location":"projects/library_management/creating_items/#data-model","title":"Data Model","text":"<ul> <li>item_id      A unique identifier for each item (UUID, auto-increment integer, etc.).  </li> <li>name      The title or name of the item (e.g., \u201cHarry Potter and the Chamber of Secrets,\u201d \u201cNational Geographic,\u201d \u201cThe Lion King\u201d DVD).  </li> <li>type      One of [\"book\", \"magazine\", \"dvd\"] at this point. (You\u2019ll add \"cd\" later.)  </li> <li>status (optional at this stage, but recommended)      Indicates if an item is \"available\" or \"borrowed.\" This will be critical once you implement borrowing and returning logic.</li> </ul>"},{"location":"projects/library_management/creating_items/#database-options","title":"Database Options","text":"<p>Similar to user storage, you can use:    - A SQL database table, for example:      <pre><code>CREATE TABLE items (\n  item_id TEXT PRIMARY KEY,\n  name TEXT NOT NULL,\n  type TEXT NOT NULL,\n  status TEXT DEFAULT 'available'\n);\n</code></pre>    - SQLite or an in-memory approach if you want something simpler.    - A JSON file or in-memory array for quick prototyping.  </p> <p>Whichever method you choose, the structure should support at least the four fields listed above.</p>"},{"location":"projects/library_management/creating_items/#endpoints","title":"Endpoints","text":"<p>a. POST /items    - Purpose: Create a new item record.    - Request Body example:      <pre><code>{\n  \"name\": \"National Geographic - June Edition\",\n  \"type\": \"magazine\"\n}\n</code></pre>    - Implementation:      1. Validate that <code>name</code> and <code>type</code> exist.      2. Ensure <code>type</code> is one of [\"book\", \"magazine\", \"dvd\"].      3. Generate a unique <code>item_id</code>.      4. Insert the item into your items table (SQL) or data store.    - Response example:      <pre><code>{\n  \"item_id\": \"123e4567-e89b-12d3-a456-426614174020\",\n  \"name\": \"National Geographic - June Edition\",\n  \"type\": \"magazine\",\n  \"status\": \"available\"\n}\n</code></pre>    - Status Codes:      - 201 Created if successful.      - 400 Bad Request if validation fails.  </p> <p>b. GET /items (optional but helpful)    - Purpose: Retrieve a list of all items.    - Implementation: Return an array of item objects from your data store.    - Response example:      <pre><code>[\n  {\n    \"item_id\": \"abc123\",\n    \"name\": \"Harry Potter and the Chamber of Secrets\",\n    \"type\": \"book\",\n    \"status\": \"available\"\n  },\n  {\n    \"item_id\": \"def456\",\n    \"name\": \"Madagascar\",\n    \"type\": \"dvd\",\n    \"status\": \"available\"\n  }\n]\n</code></pre></p> <p>c. GET /items/:id (optional)    - Purpose: Retrieve a single item by its ID.    - Response: The item object, or a 404 if not found.</p>"},{"location":"projects/library_management/creating_items/#data-validation","title":"Data Validation","text":"<ul> <li>Make sure you only accept valid types (\"book\", \"magazine\", \"dvd\").  </li> <li>You can extend your validation (for example, ensuring <code>name</code> is not empty).  </li> </ul>"},{"location":"projects/library_management/creating_items/#testing-your-item-endpoints","title":"Testing Your Item Endpoints","text":"<ul> <li>Use Postman, curl, or a similar tool to create items via <code>POST /items</code>.  </li> <li>Verify you can retrieve them with <code>GET /items</code> and optionally <code>GET /items/:id</code>.  </li> <li>Check that your application handles error cases (missing name, invalid type, etc.) gracefully.</li> </ul>"},{"location":"projects/library_management/creating_items/#next-steps","title":"Next Steps","text":"<p>After setting up item creation and retrieval, you\u2019ll be ready to tackle borrowing logic, which brings together Users and Items. You\u2019ll enforce membership-based borrowing limits and track which items are out on loan vs. available. That\u2019s where the <code>status</code> field on each item will become essential.  </p> <p>Continue to the next section where you\u2019ll learn how to implement and manage the borrowing/returning functionality.</p>"},{"location":"projects/library_management/overview/","title":"Library Management System \u2014 Overview","text":""},{"location":"projects/library_management/overview/#project-goal","title":"Project Goal","text":"<p>In this project, you will build a backend system that manages a library\u2019s collection of items (books, magazines, DVDs, and CDs) and handles user memberships, borrowing, returning, and a promotion system. You\u2019ll apply Object-Oriented Programming (OOP) principles, containerize your application with Docker, and use a database (SQLite or a multi-service Docker Compose setup) to store data.</p>"},{"location":"projects/library_management/overview/#key-features","title":"Key Features","text":"<ol> <li> <p>User Management</p> <ul> <li>Create users with different membership levels (Student, Basic, Premium).</li> <li>Track their borrowing history.</li> </ul> </li> <li> <p>Item Catalog</p> <ul> <li>Add various library items (books, magazines, DVDs, CDs).</li> <li>Store each item\u2019s title, type, and availability status.</li> </ul> </li> <li> <p>Borrowing &amp; Returning</p> <ul> <li>Implement borrowing rules based on membership limits.</li> <li>Enforce due dates and item availability.</li> </ul> </li> <li> <p>Promotion System</p> <ul> <li>Grant users who have borrowed 15+ books in the last year a double book limit.</li> </ul> </li> </ol>"},{"location":"projects/library_management/overview/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Basic Programming Knowledge You should be comfortable writing APIs in your chosen language (Node.js, Python, Java, etc.).</p> </li> <li> <p>Fundamental Database Skills You\u2019ll need to read and write data to SQLite or another database.</p> </li> <li> <p>Familiarity with Docker You must containerize your app. If you need a DB container (e.g., Postgres), you\u2019ll spin it up with Docker Compose.</p> </li> </ul>"},{"location":"projects/library_management/overview/#learning-objectives","title":"Learning Objectives","text":"<ol> <li> <p>OOP Principles &amp; API Design</p> <ul> <li>Learn how to structure your backend around clear entities (User, Item, Borrowing Records, etc.).</li> <li>Practice building RESTful endpoints for core CRUD operations.</li> </ul> </li> <li> <p>Complex Business Rules</p> <ul> <li>Enforce membership-based borrowing limits.</li> <li>Track return dates and history.</li> <li>Implement a promotion system based on borrowing frequency.</li> </ul> </li> <li> <p>Environment Setup &amp; Deployment</p> <ul> <li>Gain experience creating a production-like environment using Docker.</li> <li>Optionally orchestrate multiple services (API, DB) with Docker Compose.</li> </ul> </li> <li> <p>Extensibility &amp; Maintenance</p> <ul> <li>Understand how modular architecture and clean code practices enable easier feature additions (e.g., new item types, membership tiers).</li> </ul> </li> </ol>"},{"location":"projects/library_management/overview/#what-youll-end-up-with","title":"What You\u2019ll End Up With","text":"<p>By the end of the project, you\u2019ll have a fully containerized backend that can:</p> <ul> <li>Create and manage library users with different memberships.</li> <li>Store and categorize library items (books, magazines, DVDs, and CDs).</li> <li>Handle borrowing and returning with membership limits enforced.</li> <li>Apply promotions to frequent borrowers (double book limit).</li> <li>Persist data in a database of your choice.</li> </ul>"},{"location":"projects/library_management/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Review Your Environment: Make sure Docker is installed, and you\u2019re comfortable running images.</li> <li>Check Docker Compose: If you plan to use a separate DB, confirm you can spin up multi-container setups.</li> <li>Pick Your Language: If unsure, start with what you know best. Node.js or Python often have simpler boilerplates for junior developers.</li> <li>Move on to Step 1: Begin by setting up the core User and Item models, endpoints, and container configuration.</li> </ul>"},{"location":"projects/library_management/promotion_system/","title":"Promotion System","text":""},{"location":"projects/library_management/promotion_system/#overview","title":"Overview","text":"<p>You\u2019ve successfully built a system where users can borrow and return items (books, magazines, DVDs, and CDs) with membership-specific limits. Now, you\u2019ll add a promotion feature that rewards avid readers by doubling their book borrowing limit if they meet certain criteria.</p>"},{"location":"projects/library_management/promotion_system/#promotion-rules","title":"Promotion Rules","text":"<ul> <li>If a user has borrowed 15 or more books in the last year, their book borrowing limit is doubled.  </li> <li>This applies to all membership types. For example:<ul> <li>A Student can normally hold 5 books. If they\u2019re promotion-eligible, they can hold 10 books.  </li> <li>A Premium member with a 10-book limit can borrow 20 books if they qualify.  </li> </ul> </li> </ul>"},{"location":"projects/library_management/promotion_system/#defining-promotion-eligibility","title":"Defining Promotion Eligibility","text":"<ul> <li>Time Window: Count how many books were borrowed in the past 12 months (or 365 days from now).  </li> <li>Threshold: If borrowed <code>&gt;= 15</code> books in that period, set a \u201cpromotion-eligible\u201d flag for the user.  </li> </ul> <p>Implementation Approaches    - On-The-Fly Check:      1. Each time a user attempts to borrow a book, look at their borrowing history for the last year.      2. If it\u2019s 15 or more, consider them promotion-eligible right away.    - Cached/Stored Flag:      1. When they borrow a book, calculate if they\u2019ve reached the threshold.      2. Store a boolean (e.g., <code>isPromotionEligible</code>) on the user record.      3. Update it periodically or whenever a borrow action happens.</p>"},{"location":"projects/library_management/promotion_system/#borrowing-logic","title":"Borrowing Logic","text":"<ul> <li>When a user attempts to borrow a book:<ol> <li>Check how many books they\u2019ve borrowed in the past 12 months.  </li> <li>If &gt;= 15, override the standard membership limit with the double limit.  </li> <li>Continue normal checks (e.g., item availability).  </li> </ol> </li> </ul> <p>Example:    - Student limit for books = 5.    - With promotion, limit = 10.    - If the user is promotion-eligible, treat their book limit as 10 instead of 5.</p>"},{"location":"projects/library_management/promotion_system/#implementation-details","title":"Implementation Details","text":"<ul> <li>Borrowing History is crucial. You need to store not just whether they borrowed items, but also when.  </li> <li>If you\u2019re using a dedicated \u201cborrowings\u201d table, you might run a query like:      <pre><code>SELECT COUNT(*) \n  FROM borrowings\n WHERE user_id = :userId\n   AND item_type = 'book'\n   AND borrowed_date &gt;= :oneYearAgo\n</code></pre>      If the result is <code>&gt;= 15</code>, they\u2019re eligible.  </li> <li>If you\u2019re storing history in-memory or in a JSON file, loop through the user\u2019s history entries, filter out those older than a year, and count how many are <code>\"book\"</code>.</li> </ul>"},{"location":"projects/library_management/promotion_system/#endpoints-optional-enhancements","title":"Endpoints (Optional Enhancements)","text":"<ul> <li>GET /users/:id/promotion-status <ul> <li>Returns an object indicating if the user is promotion-eligible and (if yes) what their new limit is.  </li> <li>Example Response:    <pre><code>{\n  \"user_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"promotion_eligible\": true,\n  \"effective_book_limit\": 10\n}\n</code></pre></li> </ul> </li> <li>PUT /users/:id/promotion-reset (completely optional)  <ul> <li>If you want an admin to manually reset or revoke the promotion status for any reason.</li> </ul> </li> </ul>"},{"location":"projects/library_management/promotion_system/#testing-promotion-logic","title":"Testing Promotion Logic","text":"<ul> <li>Create a user and borrow 15 books (you can do this quickly by auto-generating the borrow history if you want).  </li> <li>Attempt to borrow a 16th book:<ul> <li>Without the promotion, the user would normally be blocked if their limit is 5 or 10.  </li> <li>With the promotion in effect, they should be allowed to exceed the normal membership cap.  </li> </ul> </li> <li>Ensure that the rule only applies to books (magazines, DVDs, and CDs remain unchanged).</li> </ul>"},{"location":"projects/library_management/promotion_system/#performance-considerations-for-the-curious","title":"Performance Considerations (for the curious)","text":"<ul> <li>If you\u2019re frequently checking large borrowing histories, you might need indexing or caching.  </li> <li>For this project, a straightforward solution (counting rows or iterating over an array) is typically fine.</li> </ul>"},{"location":"projects/library_management/promotion_system/#next-steps","title":"Next Steps","text":"<ul> <li>With promotions in place, you have a fully-featured system covering user creation, item storage, borrowing/returning, and specialized membership logic.  </li> <li>You can now:<ul> <li>Add fines, overdue fees, or notifications.  </li> <li>Improve search functionality (e.g., find items by name).  </li> <li>Implement authentication if you want to secure these endpoints.  </li> </ul> </li> </ul> <p>Congratulations! You\u2019ve built a robust Library Management System that demonstrates real-world backend challenges\u2014database design, membership logic, containerization, and advanced features like promotions. Whether you stop here or keep adding more features, you\u2019ve laid a solid foundation.</p>"},{"location":"projects/library_management/storing_users/","title":"Storing Users","text":""},{"location":"projects/library_management/storing_users/#1-overview","title":"1. Overview","text":"<p>Users in the Library Management System have:</p> <ul> <li>A unique ID (e.g., UUID).</li> <li>Basic details: <code>name</code> (string), <code>email</code> (string).</li> <li>A membership type: one of <code>[\"student\", \"basic\", \"premium\"]</code>.</li> </ul> <p>Each membership type enforces different borrowing limits (books, magazines, DVDs, CDs). You\u2019ll integrate these rules in later pages when implementing borrowing logic. For now, focus on storing user data and providing CRUD endpoints (if needed).</p>"},{"location":"projects/library_management/storing_users/#2-data-model","title":"2. Data Model","text":""},{"location":"projects/library_management/storing_users/#21-minimal-fields","title":"2.1 Minimal Fields","text":"<ol> <li><code>user_id</code>: Unique identifier (UUID or auto-increment integer).  </li> <li><code>name</code>: User\u2019s full name (string).  </li> <li><code>email</code>: User\u2019s email (string).  </li> <li><code>membership_type</code>: <code>\"student\"</code>, <code>\"basic\"</code>, or <code>\"premium\"</code>.</li> </ol>"},{"location":"projects/library_management/storing_users/#22-optional-fields","title":"2.2 Optional Fields","text":"<ul> <li><code>created_at</code>: Timestamp of user creation (useful for auditing/logs).</li> <li><code>updated_at</code>: Timestamp of last update.</li> </ul> <p>Note: Depending on your language or framework, you might use classes (<code>class User</code>), structs, or just plain objects. If you\u2019re using a SQL database, you\u2019ll likely define a <code>users</code> table.</p>"},{"location":"projects/library_management/storing_users/#3-database-options","title":"3. Database Options","text":""},{"location":"projects/library_management/storing_users/#31-storing-users-with-sqlite","title":"3.1 Storing Users with SQLite","text":"<p>If you\u2019re choosing SQLite: - Create a <code>.db</code> file in your Docker container or on your local machine. - Define a <code>users</code> table, for example:</p> <pre><code>CREATE TABLE users (\n  user_id TEXT PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT NOT NULL,\n  membership_type TEXT NOT NULL,\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> <ul> <li>Pros: Self-contained, no extra Docker services needed.  </li> <li>Cons: Limited concurrency for large-scale apps.</li> </ul>"},{"location":"projects/library_management/storing_users/#32-storing-users-with-postgresmysql-docker-compose","title":"3.2 Storing Users with Postgres/MySQL (Docker Compose)","text":"<p>If you prefer a more robust DB (Postgres, MySQL, etc.):</p> <ul> <li>Define your <code>docker-compose.yml</code> with both <code>app</code> and <code>db</code> services.  </li> <li>Create a <code>users</code> table in your DB. For example, in PostgreSQL:</li> </ul> <pre><code>CREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  name VARCHAR(100) NOT NULL,\n  email VARCHAR(100) NOT NULL UNIQUE,\n  membership_type VARCHAR(50) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> <ul> <li>Make sure your app container can connect to the database container using environment variables (e.g., <code>DB_HOST</code>, <code>DB_USER</code>, etc.).</li> </ul>"},{"location":"projects/library_management/storing_users/#33-in-memory-or-json-file-for-prototyping","title":"3.3 In-Memory or JSON File (for Prototyping)","text":"<ul> <li>If you\u2019re just getting started or want a quick prototype, you can store users in a simple array or JSON file:</li> </ul> <pre><code>// Example for Node.js\nconst users = [];\n\nfunction addUser(user) {\n  users.push(user);\n}\n</code></pre> <ul> <li>Warning: This won\u2019t persist data after your application restarts (unless you\u2019re reading/writing to a file). It\u2019s fine for local practice but less realistic.</li> </ul> <p>Tip for Junior/Mid-Level: If you\u2019re new to SQL, try SQLite first; if you\u2019re comfortable spinning up multi-container setups, go for Postgres or MySQL.  </p>"},{"location":"projects/library_management/storing_users/#4-creating-users-endpoint-design","title":"4. Creating Users (Endpoint Design)","text":""},{"location":"projects/library_management/storing_users/#41-post-users","title":"4.1 <code>POST /users</code>","text":"<p>Goal: Create a new user record in your data store (DB, in-memory, etc.).</p> <ol> <li>Request Body example:    <pre><code>{\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\",\n  \"membership_type\": \"student\"\n}\n</code></pre></li> <li>Validation:</li> <li>Check <code>name</code> and <code>email</code> are provided.</li> <li>Check <code>membership_type</code> is one of <code>[\"student\", \"basic\", \"premium\"]</code>.</li> <li>Implementation:</li> <li>Generate a unique ID (UUID or auto increment).</li> <li>Insert the user into the users table (SQL) or array/file (non-SQL).</li> <li>Response example:    <pre><code>{\n  \"user_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\",\n  \"membership_type\": \"student\"\n}\n</code></pre></li> <li>Status Codes:</li> <li>201 Created if successful.</li> <li>400 Bad Request if validation fails.</li> <li>409 Conflict if you want to handle duplicate emails with a special code (optional).</li> </ol>"},{"location":"projects/library_management/storing_users/#5-reading-users-optionally-expose-more-endpoints","title":"5. Reading Users (Optionally Expose More Endpoints)","text":"<p>Depending on your requirements, you may also provide endpoints to list or retrieve user details:</p>"},{"location":"projects/library_management/storing_users/#51-get-users","title":"5.1 <code>GET /users</code>","text":"<ul> <li>Description: Returns a list of all users.</li> <li>Response: An array of user objects.</li> </ul>"},{"location":"projects/library_management/storing_users/#52-get-usersid","title":"5.2 <code>GET /users/:id</code>","text":"<ul> <li>Description: Returns a single user by <code>user_id</code>.</li> <li>Response: The user object, or a 404 if not found.</li> </ul>"},{"location":"projects/library_management/storing_users/#6-updating-or-deleting-users-optional","title":"6. Updating or Deleting Users (Optional)","text":"<p>You might want to allow membership changes or the ability to delete users entirely. Decide if that\u2019s relevant to your library system.</p>"},{"location":"projects/library_management/storing_users/#61-put-usersid-update","title":"6.1 <code>PUT /users/:id</code> (Update)","text":"<ul> <li>Request Body could include fields like <code>membership_type</code> if you allow changes.</li> <li>Response: The updated user.</li> </ul>"},{"location":"projects/library_management/storing_users/#62-delete-usersid","title":"6.2 <code>DELETE /users/:id</code>","text":"<ul> <li>Response: Some success message if the user was removed, or 404 if not found.</li> </ul>"},{"location":"projects/library_management/storing_users/#7-ensuring-data-integrity-best-practices","title":"7. Ensuring Data Integrity &amp; Best Practices","text":"<ol> <li>Unique Email: Consider making <code>email</code> unique in your DB. Helps avoid duplicate accounts.</li> <li>Indexing: If using SQL, index your <code>email</code> or <code>membership_type</code> if queries rely on them often.</li> <li>Timestamps: <code>created_at</code> and <code>updated_at</code> can be automatically managed by your DB (using default values, triggers, or ORM features).</li> <li>Validation: Always validate membership types to avoid data inconsistencies (<code>\"student\"</code>, <code>\"basic\"</code>, <code>\"premium\"</code> only).</li> </ol>"},{"location":"projects/library_management/storing_users/#8-docker-database-integration","title":"8. Docker &amp; Database Integration","text":""},{"location":"projects/library_management/storing_users/#81-sqlite-in-one-container","title":"8.1 SQLite in One Container","text":"<ul> <li>Add SQLite to your Docker image (e.g., for Node.js: <code>RUN npm install sqlite3</code>).</li> <li>Store the <code>.db</code> file inside your container\u2019s filesystem.  </li> <li>Pros: Single container, no Compose needed.</li> </ul>"},{"location":"projects/library_management/storing_users/#82-docker-compose-with-postgres-example","title":"8.2 Docker Compose with Postgres (Example)","text":"<ul> <li>Add a <code>db</code> service to your <code>docker-compose.yml</code>.  </li> <li>In your <code>app</code> service, set environment variables (<code>DB_HOST=db</code>, <code>DB_NAME=library</code>, etc.).</li> <li>Migrate or create tables automatically on startup (using migration tools or custom scripts).</li> </ul>"},{"location":"projects/library_management/storing_users/#9-testing-user-storage","title":"9. Testing User Storage","text":"<p>Before moving on to item storage or borrowing logic, test your user endpoints thoroughly:</p> <ol> <li>POST /users to create new users.</li> <li>**GET /users<code>** or</code>GET /users/:id` to confirm user data is stored correctly.</li> <li>(Optional) PUT /users/:id to edit user membership.</li> <li>(Optional) DELETE /users/:id if supporting user removal.</li> </ol> <p>Use a tool like Postman, Insomnia, or just curl to verify correct responses (including status codes).</p>"},{"location":"projects/library_management/storing_users/#10-conclusion","title":"10. Conclusion","text":"<p>You have now laid a solid foundation for user management in your Library Management System. With unique user records and basic membership types in place, you\u2019re ready to integrate the next component: storing items (books, magazines, DVDs, CDs) and eventually handling the borrowing logic that ties users to items.</p> <p>Next Page: Storing Items &amp; Basic Catalog Management (Link to the next part of the instructions where you define item data models and implement endpoints for adding and viewing library items.)</p> <p>Recap: On this page, you learned how to: - Create a <code>users</code> table or data structure. - Implement an endpoint to add new users. - Optionally retrieve/update/delete users as needed. - Integrate database logic with Docker or Docker Compose.</p> <p>With your users properly stored, you can move on to the item side of the library and eventually combine these to manage borrowing and returning.</p>"}]}